; -*- mode: emacs-lisp; -*-
;; vim: filetype=lisp

;; Global Emacs configuration file
;; No "custom-sets" here

;; Indentation
(setq c-basic-offset 4)
(setq tab-width 4)
(setq-default indent-tabs-mode nil)

(autoload 'gtags-mode "gtags" "" t)

;; Move current line up or down with M-up or M-down
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (let ((col (current-column))
	start
	end)
    (beginning-of-line)
    (setq start (point))
    (end-of-line)
    (forward-char)
    (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col))))
 
(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))
 
(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

;; Keys
(global-set-key (kbd "A-<up>")   'move-line-up)
(global-set-key (kbd "A-<down>") 'move-line-down) 
(global-set-key (kbd "M-<up>")   'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down) 
(global-set-key "\M-g"           'goto-line)
(global-set-key "\C-l"           'goto-line)
(global-set-key "\M-F"           'indent-region)

;; Manual jde install
;;(add-to-list 'load-path (expand-file-name "~/.emacs.d/site/jde/lisp"))
(require 'jde)

;; IDO-Mode (emacs goodies)
;; File open and buffer switch helper
(require 'ido)
(ido-mode t)
;;(require 'un-define)


;; TXT2Tags
(add-to-list 'load-path "~/.emacs.d")
(setq auto-mode-alist (append (list
			       '("\\.t2t$" . t2t-mode)
			       )
			      (if (boundp 'auto-mode-alist) auto-mode-alist)
			      ))
(autoload  't2t-mode "txt2tags-mode" "Txt2tags Mode" t)
(column-number-mode 1)
(size-indication-mode 1)

;; Detect indent - Para alguns modos: C/C++, Shell Script, perl, etc.
(add-to-list 'load-path "~/.emacs.d/plugins/dtrt-indent")
(require 'dtrt-indent)
(dtrt-indent-mode 1)

;; Color Theme
(require 'color-theme)
(color-theme-initialize)
(color-theme-charcoal-black)

;; Errr.. can't remember
(put 'scroll-left 'disabled nil)

;; Mouse wheel scrolling
(mouse-wheel-mode t)

;; ===== Set the highlight current line minor mode =====
;;
;; In every buffer, the line which contains the cursor will be fully
;; highlighted
(global-hl-line-mode 1)
(set-face-background 'hl-line "#440")  ;; Emacs 22+ 
;(set-face-background 'highlight "#330")  ;; Emacs 21

;; ========== Set the fill column ==========
(setq-default fill-column 72)

;; ===== Turn on Auto Fill mode automatically in all modes =====

;; Auto-fill-mode the the automatic wrapping of lines and insertion of
;; newlines when the cursor goes over the column limit.

;; This should actually turn on auto-fill-mode by default in all major
;; modes. The other way to do this is to turn on the fill for specific modes
;; via hooks.
(setq auto-fill-mode 1)

;; Git  
(require 'magit)

;;; turn on syntax hilighting
(global-font-lock-mode 1)

;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
(autoload 'groovy-mode "groovy-mode" "Groovy editing mode." t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

;; yasnippet
;; Just use TAB to auto insert snippet!
;; http://code.google.com/p/yasnippet/
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet-0.6.1c")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet-0.6.1c/snippets")
(require 'dropdown-list)

;; Initialize Pymacs                                                                                           
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)

;; ropemacs - Code auto-complete using rope library
;; Use M-? and M-/
;; http://rope.sourceforge.net/ropemacs.html
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)

;; AutoComplete (http://www.emacswiki.org/emacs/AutoComplete)
(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete")
(when (require 'auto-complete nil t)
  (require 'auto-complete-yasnippet)
  (require 'auto-complete-css)
  (require 'auto-complete-cpp)
  (require 'auto-complete-emacs-lisp)
  (require 'auto-complete-gtags)
  (require 'auto-complete-python)
  (require 'auto-complete-semantic)
  ;; (require 'auto-complete-ruby) ;; problems with this plugin
  (global-auto-complete-mode t))

;; Duplicate line (C-c C-d)
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd "C-c C-d") 'duplicate-line)


;; Join lines
;; -- define a new command to join multiple lines together --
(defun join-lines () (interactive)
 (setq fill-column 100000)
 (fill-paragraph nil)
 (setq fill-column 76)
)
(global-set-key (kbd "C-c C-j") 'join-lines)

;; Wikipedia Mode
;; http://en.wikipedia.org/wiki/Wikipedia:Wikipedia-mode.el
(autoload 'wikipedia-mode "wikipedia-mode.el"
"Major mode for editing documents in Wikipedia markup." t)

(add-to-list 'auto-mode-alist
'("\\.wiki\\'" . wikipedia-mode))

;; To use with Firefox ViewSource Extension
(add-to-list 'auto-mode-alist
'("en\\.wikipedia\\.org" . wikipedia-mode))

;; ItsAllText Firefox Extension usage
(add-to-list 'auto-mode-alist
'("itsalltext.*\\.txt$" . wikipedia-mode))

;; long lines support
(autoload 'longlines-mode "longlines.el"
"Minor mode for editing long lines." t)

;; ansi colors on shell
(ansi-color-for-comint-mode-on) 

;; confirm emacs quit
(setq confirm-kill-emacs 'yes-or-no-p) 

;; server mode (to use emacsclient)
(server-start)

;; change default indent to ellemtel in c/c++ (see c-style-alist for a list)
(setq c-default-style (quote ((c-mode . "ellemtel") (c++-mode . "ellemtel") (java-mode . "java") (awk-mode . "awk") (other . "gnu"))))

;; anti-aliased fonts
(if (>= emacs-major-version 23)   (set-default-font "Monospace-10"))

;; default font
;; needs package xfonts-terminus
(set-face-font 'default "-*-terminus-medium-r-*-*-*-140-75-75-*-*-iso8859-15")

;; recentf stuff
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;; tab bar
(require 'tabbar)
(tabbar-mode 1)

;; tab bar key binding (win-like)
(dolist (func '(tabbar-mode tabbar-forward-tab tabbar-forward-group tabbar-backward-tab tabbar-backward-group))
  (autoload func "tabbar" "Tabs at the top of buffers and easy control-tab navigation"))

(defmacro defun-prefix-alt (name on-no-prefix on-prefix &optional do-always)
  `(defun ,name (arg)
     (interactive "P")
     ,do-always
     (if (equal nil arg)
         ,on-no-prefix
       ,on-prefix)))

(defun-prefix-alt shk-tabbar-next (tabbar-forward-tab) (tabbar-forward-group) (tabbar-mode 1))
(defun-prefix-alt shk-tabbar-prev (tabbar-backward-tab) (tabbar-backward-group) (tabbar-mode 1))

(global-set-key [(control tab)] 'shk-tabbar-next)
(global-set-key [(control shift tab)] 'shk-tabbar-prev)
(global-set-key (kbd "<C-S-iso-lefttab>") 'shk-tabbar-prev)


;; add a buffer modification state indicator in the tab label,
;; and place a space around the label to make it looks less crowd
(defadvice tabbar-buffer-tab-label (after fixup_tab_label_space_and_flag activate)
  (setq ad-return-value
        (if (and (buffer-modified-p (tabbar-tab-value tab))
                 (buffer-file-name (tabbar-tab-value tab)))
            (concat " + " (concat ad-return-value " "))
          (concat " " (concat ad-return-value " ")))))

;; called each time the modification state of the buffer changed
(defun ztl-modification-state-change ()
  (tabbar-set-template tabbar-current-tabset nil)
  (tabbar-display-update))
;; first-change-hook is called BEFORE the change is made
(defun ztl-on-buffer-modification ()
  (set-buffer-modified-p t)
  (ztl-modification-state-change))
(add-hook 'after-save-hook 'ztl-modification-state-change)
;; this doesn't work for revert, I don't know
;;(add-hook 'after-revert-hook 'ztl-modification-state-change)
(add-hook 'first-change-hook 'ztl-on-buffer-modification)


;; setup compile package
;; TODO: allow to specify function as compile-command
(require 'compile)
(setq compilation-disable-input nil)
(setq compilation-scroll-output t)
(setq mode-compile-always-save-buffer-p t)

(require 'eassist)
(defun oznek/eassist-hook ()
  (local-set-key "\C-ct" 'eassist-switch-h-cpp)
  (local-set-key "\C-xt" 'eassist-switch-h-cpp)
  (local-set-key "\C-ce" 'eassist-list-methods)
  )
(add-hook 'c-mode-common-hook 'oznek/eassist-hook)

;; Markdown mode support
(autoload 'markdown-mode "markdown-mode.el"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist
             '("\\.markdown$" . markdown-mode))

;; ========== Line by line scrolling ==========

;; This makes the buffer scroll by only a single line when the up or
;; down cursor keys push the cursor (tool-bar-mode) outside the
;; buffer. The standard emacs behaviour is to reposition the cursor in
;; the center of the screen, but this can make the scrolling confusing

(setq scroll-step 1)

;; orgmode (http://orgmode.org)
(add-to-list 'load-path "~/.emacs.d/plugins/org-6.36c/lisp")
(add-to-list 'load-path "~/.emacs.d/plugins/org-6.36c/contrib/lisp")
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(transient-mark-mode 1)


;; left line numbers
(add-hook 'find-file-hook (lambda () (linum-mode 1)))
